// This is your enhanced Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String    @id @default(uuid())
  email     String    @unique
  firstName String?
  lastName  String?
  phone     String?
  password  String
  role      UserRole  @default(CUSTOMER)
  isActive  Boolean   @default(true)
  deletedAt DateTime? // Soft delete
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String? // Admin who created this user
  updatedBy String? // Admin who last updated this user

  // Relations
  addresses          Address[]
  orders             Order[]
  reviews            Review[]
  wishlist           WishlistItem[]
  cartItems          CartItem[]
  notifications      Notification[]
  productViews       ProductView[]
  socialLogins       SocialLogin[]
  productQuestions   ProductQuestion[]
  emailSubscriptions EmailSubscription[]
  apiKeys            ApiKey[]
  savedSearches      SavedSearch[]

  // Audit trail relations
  createdUsers  User[] @relation("UserCreatedBy")
  updatedUsers  User[] @relation("UserUpdatedBy")
  userCreatedBy User?  @relation("UserCreatedBy", fields: [createdBy], references: [id])
  userUpdatedBy User?  @relation("UserUpdatedBy", fields: [updatedBy], references: [id])

  @@index([email])
  @@map("users")
}

enum UserRole {
  ADMIN
  CUSTOMER
  MODERATOR
  VENDOR
}

model Address {
  id           String      @id @default(uuid())
  userId       String
  type         AddressType
  firstName    String
  lastName     String
  company      String?
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  zipCode      String
  country      String      @default("US")
  phone        String?
  isDefault    Boolean     @default(false)
  deletedAt    DateTime? // Soft delete
  createdAt    DateTime    @default(now())

  // Relations
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")

  @@map("addresses")
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

// Product Management
model Category {
  id              String    @id @default(uuid())
  name            String    @unique
  slug            String    @unique
  description     String?
  image           String?
  parentId        String?
  isActive        Boolean   @default(true)
  sortOrder       Int?
  metaTitle       String?
  metaDescription String?
  deletedAt       DateTime? // Soft delete
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  parent   Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[]        @relation("CategoryHierarchy")
  products ProductCategory[]

  @@index([slug])
  @@map("categories")
}

model Brand {
  id          String    @id @default(uuid())
  name        String    @unique
  slug        String    @unique
  description String?
  logo        String?
  website     String?
  isActive    Boolean   @default(true)
  deletedAt   DateTime? // Soft delete

  // Relations
  products Product[]

  @@index([slug])
  @@map("brands")
}

model Vendor {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  phone         String?
  address       String?
  contactPerson String?
  isActive      Boolean   @default(true)
  deletedAt     DateTime? // Soft delete
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  products Product[]

  @@map("vendors")
}

model Product {
  id               String        @id @default(uuid())
  name             String
  slug             String        @unique
  description      String?
  shortDescription String?
  brandId          String
  vendorId         String?
  sku              String?       @unique
  status           ProductStatus @default(DRAFT)
  isFeatured       Boolean       @default(false)
  weight           Float?
  dimensions       String?
  metaTitle        String?
  metaDescription  String?
  deletedAt        DateTime? // Soft delete
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  createdBy        String?
  updatedBy        String?

  // Relations
  brand            Brand               @relation(fields: [brandId], references: [id])
  vendor           Vendor?             @relation(fields: [vendorId], references: [id])
  categories       ProductCategory[]
  variants         ProductVariant[]
  images           ProductImage[]
  attributes       ProductAttribute[]
  reviews          Review[]
  wishlistItems    WishlistItem[]
  collections      ProductCollection[]
  views            ProductView[]
  seoSettings      ProductSEO?
  productQuestions ProductQuestion[]

  @@index([slug])
  @@index([sku])
  @@index([status])
  @@map("products")
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  DISCONTINUED
}

model ProductCategory {
  productId  String
  categoryId String

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
  @@map("product_categories")
}

model ProductVariant {
  id                String    @id @default(uuid())
  productId         String
  name              String
  sku               String?   @unique
  price             Float
  compareAtPrice    Float?
  costPrice         Float?
  inventory         Int       @default(0)
  lowStockThreshold Int?      @default(10)
  isDefault         Boolean   @default(false)
  isActive          Boolean   @default(true)
  deletedAt         DateTime? // Soft delete

  // Variant specific attributes (size, color, etc.)
  size     String?
  color    String?
  colorHex String?
  material String?

  // Relations
  product       Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]
  cartItems     CartItem[]
  inventoryLogs InventoryLog[]
  priceHistory  PriceHistory[]

  @@index([sku])
  @@map("product_variants")
}

model ProductImage {
  id        String    @id @default(uuid())
  productId String
  url       String
  altText   String?
  sortOrder Int       @default(0)
  isMain    Boolean   @default(false)
  deletedAt DateTime? // Soft delete

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Attribute {
  id           String        @id @default(uuid())
  name         String        @unique
  type         AttributeType
  isRequired   Boolean       @default(false)
  isFilterable Boolean       @default(true)
  sortOrder    Int?

  // Relations
  productAttributes ProductAttribute[]

  @@map("attributes")
}

enum AttributeType {
  TEXT
  NUMBER
  BOOLEAN
  SELECT
  MULTISELECT
  COLOR
  SIZE
}

model ProductAttribute {
  id          String @id @default(uuid())
  productId   String
  attributeId String
  value       String

  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  attribute Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  @@unique([productId, attributeId])
  @@map("product_attributes")
}

// Collections for grouping products
model Collection {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  isFeatured  Boolean   @default(false)
  sortOrder   Int?
  deletedAt   DateTime? // Soft delete
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products ProductCollection[]

  @@index([slug])
  @@map("collections")
}

model ProductCollection {
  productId    String
  collectionId String
  sortOrder    Int?   @default(0)

  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@id([productId, collectionId])
  @@map("product_collections")
}

// SEO Management
model ProductSEO {
  id              String  @id @default(uuid())
  productId       String  @unique
  metaTitle       String?
  metaDescription String?
  keywords        String?
  canonicalUrl    String?
  ogTitle         String?
  ogDescription   String?
  ogImage         String?

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_seo")
}

// Inventory Management
model InventoryLog {
  id               String           @id @default(uuid())
  productVariantId String
  type             InventoryLogType
  quantity         Int
  previousStock    Int
  newStock         Int
  reason           String?
  reference        String? // Order ID, adjustment ID, etc.
  createdAt        DateTime         @default(now())
  createdBy        String? // User ID who made the change

  productVariant ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@map("inventory_logs")
}

enum InventoryLogType {
  SALE // Stock reduced due to sale
  RESTOCK // Stock increased due to restock
  ADJUSTMENT // Manual adjustment
  RETURN // Stock increased due to return
  DAMAGE // Stock reduced due to damage
  EXPIRED // Stock reduced due to expiration
}

// Price History Tracking
model PriceHistory {
  id                String   @id @default(uuid())
  productVariantId  String
  oldPrice          Float
  newPrice          Float
  oldCompareAtPrice Float?
  newCompareAtPrice Float?
  reason            String? // "Sale", "Promotion", "Cost Change", etc.
  createdAt         DateTime @default(now())
  createdBy         String? // User ID who made the change

  productVariant ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@map("price_history")
}

// Order Management
model Order {
  id                String            @id @default(uuid())
  orderNumber       String            @unique
  userId            String?
  status            OrderStatus       @default(PENDING)
  paymentStatus     PaymentStatus     @default(PENDING)
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED)

  // Contact info (for guest orders)
  email String
  phone String?

  // Pricing
  subtotal       Float
  taxAmount      Float @default(0)
  shippingAmount Float @default(0)
  discountAmount Float @default(0)
  totalAmount    Float

  // Addresses
  shippingAddressId String?
  billingAddressId  String?

  // Shipping
  shippingMethod String?
  trackingNumber String?
  shippedAt      DateTime?
  deliveredAt    DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user            User?       @relation(fields: [userId], references: [id])
  shippingAddress Address?    @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address?    @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items           OrderItem[]
  payments        Payment[]

  @@index([orderNumber])
  @@index([status])
  @@index([email])
  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  SHIPPED
  DELIVERED
}

model OrderItem {
  id               String @id @default(uuid())
  orderId          String
  productVariantId String
  quantity         Int
  unitPrice        Float
  totalPrice       Float

  order          Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id])

  @@map("order_items")
}

// Payment Management
model Payment {
  id              String        @id @default(uuid())
  orderId         String
  amount          Float
  currency        String        @default("USD")
  method          PaymentMethod
  status          PaymentStatus
  transactionId   String?
  gatewayResponse Json?
  processedAt     DateTime?
  createdAt       DateTime      @default(now())

  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  STRIPE
  CASH_ON_DELIVERY
  BANK_TRANSFER
}

// Shopping Cart
model CartItem {
  id               String   @id @default(uuid())
  userId           String
  productVariantId String
  quantity         Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@unique([userId, productVariantId])
  @@map("cart_items")
}

// Wishlist
model WishlistItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

// Reviews and Ratings
model Review {
  id         String   @id @default(uuid())
  userId     String
  productId  String
  rating     Int // 1-5 stars
  title      String?
  comment    String?
  isVerified Boolean  @default(false)
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

// Coupons and Discounts
model Coupon {
  id             String     @id @default(uuid())
  code           String     @unique
  name           String
  description    String?
  type           CouponType
  value          Float
  minOrderAmount Float?
  maxDiscount    Float?
  usageLimit     Int?
  usageCount     Int        @default(0)
  isActive       Boolean    @default(true)
  startsAt       DateTime?
  expiresAt      DateTime?
  deletedAt      DateTime? // Soft delete
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@index([code])
  @@map("coupons")
}

enum CouponType {
  FIXED
  PERCENTAGE
  FREE_SHIPPING
}

// Tax Configuration
model TaxRate {
  id        String   @id @default(uuid())
  name      String
  rate      Float // Percentage (e.g., 8.5 for 8.5%)
  country   String
  state     String?
  city      String?
  zipCode   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tax_rates")
}

// Shipping
model ShippingZone {
  id        String   @id @default(uuid())
  name      String
  countries String[] // Array of country codes

  methods ShippingMethod[]

  @@map("shipping_zones")
}

model ShippingMethod {
  id             String  @id @default(uuid())
  shippingZoneId String
  name           String
  description    String?
  price          Float
  estimatedDays  String?
  isActive       Boolean @default(true)

  shippingZone ShippingZone @relation(fields: [shippingZoneId], references: [id])

  @@map("shipping_methods")
}

// Notifications
model Notification {
  id        String           @id @default(uuid())
  userId    String?
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  data      Json? // Additional data for the notification
  createdAt DateTime         @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum NotificationType {
  ORDER_CONFIRMATION
  ORDER_SHIPPED
  ORDER_DELIVERED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  STOCK_ALERT
  PRICE_DROP
  PROMOTIONAL
  SYSTEM
}

// Analytics
model ProductView {
  id        String   @id @default(uuid())
  productId String
  userId    String? // null for anonymous views
  sessionId String? // for tracking anonymous sessions
  ipAddress String?
  userAgent String?
  referer   String?
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("product_views")
}

model Analytics {
  id        String       @id @default(uuid())
  type      AnalyticType
  key       String // e.g., "product_views", "order_conversion"
  value     Float
  metadata  Json? // Additional context data
  date      DateTime     @db.Date
  createdAt DateTime     @default(now())

  @@unique([type, key, date])
  @@map("analytics")
}

enum AnalyticType {
  PRODUCT_VIEWS
  CONVERSION_RATE
  REVENUE
  ORDERS
  CUSTOMERS
  BOUNCE_RATE
  CART_ABANDONMENT
}

// File Management
model File {
  id           String    @id @default(uuid())
  filename     String
  originalName String
  mimeType     String
  size         Int // Size in bytes
  path         String
  url          String
  alt          String?
  description  String?
  uploadedBy   String? // User ID who uploaded
  deletedAt    DateTime? // Soft delete
  createdAt    DateTime  @default(now())

  @@map("files")
}

// Settings and Configuration
model SiteSetting {
  id    String      @id @default(uuid())
  key   String      @unique
  value String
  type  SettingType @default(TEXT)

  @@map("site_settings")
}

enum SettingType {
  TEXT
  NUMBER
  BOOLEAN
  JSON
}

// Enhanced SocialLogin model to store comprehensive Google OAuth details
model SocialLogin {
  id         String         @id @default(uuid())
  userId     String
  provider   SocialProvider
  providerId String // Google's user ID
  email      String?

  // Additional Google profile details
  name          String? // Full name from Google
  firstName     String? // Given name
  lastName      String? // Family name
  picture       String? // Profile picture URL
  locale        String? // User's locale
  emailVerified Boolean? // Whether email is verified by Google

  // OAuth tokens (encrypted/hashed in production)
  accessToken  String? // For API calls (store securely)
  refreshToken String? // For token refresh (store securely)
  tokenExpires DateTime? // When the access token expires

  // Metadata
  profileData Json? // Store full Google profile JSON
  lastSync    DateTime? // Last time profile was synced

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@index([email])
  @@map("social_logins")
}

enum SocialProvider {
  GOOGLE
  FACEBOOK
  APPLE
  TWITTER
  GITHUB
}

model ProductQuestion {
  id         String    @id @default(uuid())
  productId  String
  userId     String
  question   String
  answer     String?
  isPublic   Boolean   @default(true)
  isApproved Boolean   @default(false)
  answeredBy String? // Admin/Moderator who answered
  answeredAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@map("product_questions")
}

// Advanced Security
model LoginAttempt {
  id            String   @id @default(uuid())
  email         String
  ipAddress     String
  userAgent     String?
  success       Boolean
  failureReason String? // "invalid_password", "account_locked", etc.
  createdAt     DateTime @default(now())

  @@index([email])
  @@index([ipAddress])
  @@index([createdAt])
  @@map("login_attempts")
}

model ApiKey {
  id          String    @id @default(uuid())
  name        String
  key         String    @unique
  userId      String
  permissions Json? // Array of permissions/scopes
  isActive    Boolean   @default(true)
  lastUsed    DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([key])
  @@map("api_keys")
}

model SecurityLog {
  id        String         @id @default(uuid())
  userId    String?
  action    SecurityAction
  details   Json?
  ipAddress String?
  userAgent String?
  success   Boolean
  createdAt DateTime       @default(now())

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("security_logs")
}

enum SecurityAction {
  LOGIN
  LOGOUT
  PASSWORD_CHANGE
  PASSWORD_RESET
  ACCOUNT_LOCK
  ACCOUNT_UNLOCK
  PERMISSION_CHANGE
  API_ACCESS
  FAILED_LOGIN
}

// Email Marketing
model EmailCampaign {
  id           String         @id @default(uuid())
  name         String
  subject      String
  content      String // HTML content
  textContent  String? // Plain text version
  status       CampaignStatus @default(DRAFT)
  scheduledAt  DateTime?
  sentAt       DateTime?
  totalSent    Int            @default(0)
  totalOpened  Int            @default(0)
  totalClicked Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  createdBy    String?

  // Relations
  subscribers EmailCampaignSubscriber[]

  @@map("email_campaigns")
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  CANCELLED
}

model EmailSubscription {
  id             String    @id @default(uuid())
  email          String    @unique
  userId         String? // null for non-registered subscribers
  isActive       Boolean   @default(true)
  tags           String[] // Segmentation tags
  preferences    Json? // Email preferences
  subscribedAt   DateTime  @default(now())
  unsubscribedAt DateTime?

  user      User?                     @relation(fields: [userId], references: [id], onDelete: SetNull)
  campaigns EmailCampaignSubscriber[]

  @@index([email])
  @@map("email_subscriptions")
}

model EmailCampaignSubscriber {
  campaignId     String
  subscriptionId String
  sentAt         DateTime?
  openedAt       DateTime?
  clickedAt      DateTime?
  bounced        Boolean   @default(false)
  unsubscribed   Boolean   @default(false)

  campaign     EmailCampaign     @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  subscription EmailSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@id([campaignId, subscriptionId])
  @@map("email_campaign_subscribers")
}

// Advanced Search & Filters
model SavedSearch {
  id        String   @id @default(uuid())
  userId    String
  name      String?
  query     String? // Search query
  filters   Json // Filters applied (category, price range, etc.)
  sortBy    String?
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("saved_searches")
}

model SearchAnalytics {
  id               String   @id @default(uuid())
  query            String
  resultsCount     Int
  userId           String?
  sessionId        String?
  filters          Json?
  sortBy           String?
  clickedProductId String? // Which product was clicked from results
  noResults        Boolean  @default(false)
  createdAt        DateTime @default(now())

  @@index([query])
  @@index([createdAt])
  @@map("search_analytics")
}
